{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f20699d7",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-28T08:55:46.686705Z",
     "iopub.status.busy": "2024-05-28T08:55:46.686405Z",
     "iopub.status.idle": "2024-05-28T08:55:47.510756Z",
     "shell.execute_reply": "2024-05-28T08:55:47.509746Z"
    },
    "papermill": {
     "duration": 0.832995,
     "end_time": "2024-05-28T08:55:47.513028",
     "exception": false,
     "start_time": "2024-05-28T08:55:46.680033",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/digit-recognizer/sample_submission.csv\n",
      "/kaggle/input/digit-recognizer/train.csv\n",
      "/kaggle/input/digit-recognizer/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input/digit-recognizer'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c0690886",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T08:55:47.524488Z",
     "iopub.status.busy": "2024-05-28T08:55:47.523714Z",
     "iopub.status.idle": "2024-05-28T08:56:01.874390Z",
     "shell.execute_reply": "2024-05-28T08:56:01.873469Z"
    },
    "papermill": {
     "duration": 14.358766,
     "end_time": "2024-05-28T08:56:01.876910",
     "exception": false,
     "start_time": "2024-05-28T08:55:47.518144",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-05-28 08:55:51.052414: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-05-28 08:55:51.052521: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-05-28 08:55:51.199440: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Conv2D, Flatten, MaxPooling2D, Dropout\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9b7b1629",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T08:56:01.896971Z",
     "iopub.status.busy": "2024-05-28T08:56:01.896269Z",
     "iopub.status.idle": "2024-05-28T08:56:07.279777Z",
     "shell.execute_reply": "2024-05-28T08:56:07.278529Z"
    },
    "papermill": {
     "duration": 5.3946,
     "end_time": "2024-05-28T08:56:07.282428",
     "exception": false,
     "start_time": "2024-05-28T08:56:01.887828",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data_dir = \"/kaggle/input/digit-recognizer/train.csv\"\n",
    "test_data_dir = \"/kaggle/input/digit-recognizer/test.csv\"\n",
    "\n",
    "train = pd.read_csv(train_data_dir)\n",
    "test = pd.read_csv(test_data_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1586c8a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T08:56:07.296075Z",
     "iopub.status.busy": "2024-05-28T08:56:07.295326Z",
     "iopub.status.idle": "2024-05-28T08:56:07.326280Z",
     "shell.execute_reply": "2024-05-28T08:56:07.325329Z"
    },
    "papermill": {
     "duration": 0.040026,
     "end_time": "2024-05-28T08:56:07.328760",
     "exception": false,
     "start_time": "2024-05-28T08:56:07.288734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n",
      "0          1       0       0       0       0       0       0       0       0   \n",
      "1          0       0       0       0       0       0       0       0       0   \n",
      "2          1       0       0       0       0       0       0       0       0   \n",
      "3          4       0       0       0       0       0       0       0       0   \n",
      "4          0       0       0       0       0       0       0       0       0   \n",
      "...      ...     ...     ...     ...     ...     ...     ...     ...     ...   \n",
      "41995      0       0       0       0       0       0       0       0       0   \n",
      "41996      1       0       0       0       0       0       0       0       0   \n",
      "41997      7       0       0       0       0       0       0       0       0   \n",
      "41998      6       0       0       0       0       0       0       0       0   \n",
      "41999      9       0       0       0       0       0       0       0       0   \n",
      "\n",
      "       pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  \\\n",
      "0           0  ...         0         0         0         0         0   \n",
      "1           0  ...         0         0         0         0         0   \n",
      "2           0  ...         0         0         0         0         0   \n",
      "3           0  ...         0         0         0         0         0   \n",
      "4           0  ...         0         0         0         0         0   \n",
      "...       ...  ...       ...       ...       ...       ...       ...   \n",
      "41995       0  ...         0         0         0         0         0   \n",
      "41996       0  ...         0         0         0         0         0   \n",
      "41997       0  ...         0         0         0         0         0   \n",
      "41998       0  ...         0         0         0         0         0   \n",
      "41999       0  ...         0         0         0         0         0   \n",
      "\n",
      "       pixel779  pixel780  pixel781  pixel782  pixel783  \n",
      "0             0         0         0         0         0  \n",
      "1             0         0         0         0         0  \n",
      "2             0         0         0         0         0  \n",
      "3             0         0         0         0         0  \n",
      "4             0         0         0         0         0  \n",
      "...         ...       ...       ...       ...       ...  \n",
      "41995         0         0         0         0         0  \n",
      "41996         0         0         0         0         0  \n",
      "41997         0         0         0         0         0  \n",
      "41998         0         0         0         0         0  \n",
      "41999         0         0         0         0         0  \n",
      "\n",
      "[42000 rows x 785 columns]\n",
      "       pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  pixel8  \\\n",
      "0           0       0       0       0       0       0       0       0       0   \n",
      "1           0       0       0       0       0       0       0       0       0   \n",
      "2           0       0       0       0       0       0       0       0       0   \n",
      "3           0       0       0       0       0       0       0       0       0   \n",
      "4           0       0       0       0       0       0       0       0       0   \n",
      "...       ...     ...     ...     ...     ...     ...     ...     ...     ...   \n",
      "27995       0       0       0       0       0       0       0       0       0   \n",
      "27996       0       0       0       0       0       0       0       0       0   \n",
      "27997       0       0       0       0       0       0       0       0       0   \n",
      "27998       0       0       0       0       0       0       0       0       0   \n",
      "27999       0       0       0       0       0       0       0       0       0   \n",
      "\n",
      "       pixel9  ...  pixel774  pixel775  pixel776  pixel777  pixel778  \\\n",
      "0           0  ...         0         0         0         0         0   \n",
      "1           0  ...         0         0         0         0         0   \n",
      "2           0  ...         0         0         0         0         0   \n",
      "3           0  ...         0         0         0         0         0   \n",
      "4           0  ...         0         0         0         0         0   \n",
      "...       ...  ...       ...       ...       ...       ...       ...   \n",
      "27995       0  ...         0         0         0         0         0   \n",
      "27996       0  ...         0         0         0         0         0   \n",
      "27997       0  ...         0         0         0         0         0   \n",
      "27998       0  ...         0         0         0         0         0   \n",
      "27999       0  ...         0         0         0         0         0   \n",
      "\n",
      "       pixel779  pixel780  pixel781  pixel782  pixel783  \n",
      "0             0         0         0         0         0  \n",
      "1             0         0         0         0         0  \n",
      "2             0         0         0         0         0  \n",
      "3             0         0         0         0         0  \n",
      "4             0         0         0         0         0  \n",
      "...         ...       ...       ...       ...       ...  \n",
      "27995         0         0         0         0         0  \n",
      "27996         0         0         0         0         0  \n",
      "27997         0         0         0         0         0  \n",
      "27998         0         0         0         0         0  \n",
      "27999         0         0         0         0         0  \n",
      "\n",
      "[28000 rows x 784 columns]\n"
     ]
    }
   ],
   "source": [
    "print(train)\n",
    "print(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2e87f077",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T08:56:07.339820Z",
     "iopub.status.busy": "2024-05-28T08:56:07.339500Z",
     "iopub.status.idle": "2024-05-28T08:56:07.423651Z",
     "shell.execute_reply": "2024-05-28T08:56:07.422531Z"
    },
    "papermill": {
     "duration": 0.092593,
     "end_time": "2024-05-28T08:56:07.426260",
     "exception": false,
     "start_time": "2024-05-28T08:56:07.333667",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = train.drop(columns=['label'])\n",
    "y = train['label']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5e6d5729",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T08:56:07.438800Z",
     "iopub.status.busy": "2024-05-28T08:56:07.438463Z",
     "iopub.status.idle": "2024-05-28T08:56:07.547757Z",
     "shell.execute_reply": "2024-05-28T08:56:07.546569Z"
    },
    "papermill": {
     "duration": 0.118471,
     "end_time": "2024-05-28T08:56:07.550489",
     "exception": false,
     "start_time": "2024-05-28T08:56:07.432018",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = X.values.reshape(-1, 28, 28, 1) / 255.0\n",
    "y = to_categorical(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2a2cf578",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T08:56:07.563379Z",
     "iopub.status.busy": "2024-05-28T08:56:07.562604Z",
     "iopub.status.idle": "2024-05-28T08:56:07.949731Z",
     "shell.execute_reply": "2024-05-28T08:56:07.948664Z"
    },
    "papermill": {
     "duration": 0.395912,
     "end_time": "2024-05-28T08:56:07.952252",
     "exception": false,
     "start_time": "2024-05-28T08:56:07.556340",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "103a9920",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T08:56:07.964654Z",
     "iopub.status.busy": "2024-05-28T08:56:07.963828Z",
     "iopub.status.idle": "2024-05-28T08:56:08.897700Z",
     "shell.execute_reply": "2024-05-28T08:56:08.896825Z"
    },
    "papermill": {
     "duration": 0.942476,
     "end_time": "2024-05-28T08:56:08.900095",
     "exception": false,
     "start_time": "2024-05-28T08:56:07.957619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/keras/src/layers/convolutional/base_conv.py:99: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))\n",
    "model.add(MaxPooling2D((2, 2)))\n",
    "model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "model.add(MaxPooling2D((2, 2)))\n",
    "model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(64, activation='relu'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(10, activation='softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "03c1aad7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T08:56:08.911958Z",
     "iopub.status.busy": "2024-05-28T08:56:08.911425Z",
     "iopub.status.idle": "2024-05-28T08:56:08.924626Z",
     "shell.execute_reply": "2024-05-28T08:56:08.923875Z"
    },
    "papermill": {
     "duration": 0.021208,
     "end_time": "2024-05-28T08:56:08.926689",
     "exception": false,
     "start_time": "2024-05-28T08:56:08.905481",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b9ac6447",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T08:56:08.937869Z",
     "iopub.status.busy": "2024-05-28T08:56:08.937602Z",
     "iopub.status.idle": "2024-05-28T08:56:45.973975Z",
     "shell.execute_reply": "2024-05-28T08:56:45.973216Z"
    },
    "papermill": {
     "duration": 37.044363,
     "end_time": "2024-05-28T08:56:45.976043",
     "exception": false,
     "start_time": "2024-05-28T08:56:08.931680",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "\u001b[1m  74/1050\u001b[0m \u001b[32m━\u001b[0m\u001b[37m━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - accuracy: 0.3717 - loss: 1.8626"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1716886575.707148      72 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 4ms/step - accuracy: 0.7940 - loss: 0.6337 - val_accuracy: 0.9726 - val_loss: 0.0803\n",
      "Epoch 2/10\n",
      "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.9658 - loss: 0.1157 - val_accuracy: 0.9832 - val_loss: 0.0463\n",
      "Epoch 3/10\n",
      "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.9775 - loss: 0.0789 - val_accuracy: 0.9846 - val_loss: 0.0491\n",
      "Epoch 4/10\n",
      "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.9826 - loss: 0.0578 - val_accuracy: 0.9883 - val_loss: 0.0356\n",
      "Epoch 5/10\n",
      "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.9845 - loss: 0.0496 - val_accuracy: 0.9875 - val_loss: 0.0427\n",
      "Epoch 6/10\n",
      "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.9887 - loss: 0.0357 - val_accuracy: 0.9887 - val_loss: 0.0407\n",
      "Epoch 7/10\n",
      "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.9899 - loss: 0.0318 - val_accuracy: 0.9898 - val_loss: 0.0310\n",
      "Epoch 8/10\n",
      "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.9928 - loss: 0.0263 - val_accuracy: 0.9905 - val_loss: 0.0375\n",
      "Epoch 9/10\n",
      "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.9915 - loss: 0.0277 - val_accuracy: 0.9893 - val_loss: 0.0376\n",
      "Epoch 10/10\n",
      "\u001b[1m1050/1050\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.9928 - loss: 0.0217 - val_accuracy: 0.9901 - val_loss: 0.0389\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(X_train, y_train, epochs=10, validation_data=(X_val, y_val))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "58257238",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T08:56:46.068239Z",
     "iopub.status.busy": "2024-05-28T08:56:46.067915Z",
     "iopub.status.idle": "2024-05-28T08:56:46.593153Z",
     "shell.execute_reply": "2024-05-28T08:56:46.592161Z"
    },
    "papermill": {
     "duration": 0.573416,
     "end_time": "2024-05-28T08:56:46.595223",
     "exception": false,
     "start_time": "2024-05-28T08:56:46.021807",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9897 - loss: 0.0448\n",
      "Validation accuracy: 0.9901\n"
     ]
    }
   ],
   "source": [
    "loss, accuracy = model.evaluate(X_val, y_val)\n",
    "print(f'Validation accuracy: {accuracy:.4f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f8c0328d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T08:56:46.690272Z",
     "iopub.status.busy": "2024-05-28T08:56:46.689955Z",
     "iopub.status.idle": "2024-05-28T08:56:49.058686Z",
     "shell.execute_reply": "2024-05-28T08:56:49.057799Z"
    },
    "papermill": {
     "duration": 2.418731,
     "end_time": "2024-05-28T08:56:49.061065",
     "exception": false,
     "start_time": "2024-05-28T08:56:46.642334",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m875/875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 1ms/step\n"
     ]
    }
   ],
   "source": [
    "X_test = test.values.reshape(-1, 28, 28, 1) / 255.0\n",
    "predictions = model.predict(X_test)\n",
    "predictions = np.argmax(predictions, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b42fd809",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T08:56:49.163000Z",
     "iopub.status.busy": "2024-05-28T08:56:49.162612Z",
     "iopub.status.idle": "2024-05-28T08:56:49.205535Z",
     "shell.execute_reply": "2024-05-28T08:56:49.204613Z"
    },
    "papermill": {
     "duration": 0.096545,
     "end_time": "2024-05-28T08:56:49.207703",
     "exception": false,
     "start_time": "2024-05-28T08:56:49.111158",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "submission = pd.DataFrame({'ImageId': range(1, len(predictions) + 1), 'Label': predictions})\n",
    "submission.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0a0350b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T08:56:49.306066Z",
     "iopub.status.busy": "2024-05-28T08:56:49.305726Z",
     "iopub.status.idle": "2024-05-28T08:56:49.310537Z",
     "shell.execute_reply": "2024-05-28T08:56:49.309575Z"
    },
    "papermill": {
     "duration": 0.055072,
     "end_time": "2024-05-28T08:56:49.312624",
     "exception": false,
     "start_time": "2024-05-28T08:56:49.257552",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/working\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "print(os.getcwd())\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "databundleVersionId": 861823,
     "sourceId": 3004,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 68.343686,
   "end_time": "2024-05-28T08:56:52.008954",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-28T08:55:43.665268",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
